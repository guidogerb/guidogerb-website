name: Deploy Websites

on:
  workflow_run:
    workflows: ['Build and Test (CI)']
    types: [completed]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

env:
  NODE_VERSION: '20.19.0'
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  resolve-metadata:
    name: Resolve tenant metadata
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    outputs:
      matrix: ${{ steps.derive.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Discover tenants
        id: derive
        run: |
          node infra/scripts/resolve-tenants.mjs --format matrix --github-output matrix

  deploy:
    if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    name: Deploy ${{ matrix.domain }}
    needs: resolve-metadata
    runs-on: ubuntu-latest
    concurrency: deploy-${{ matrix.domain }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.resolve-metadata.outputs.matrix) }}
    env:
      NPMRC_TOKEN: ${{ secrets.NPMRC_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          standalone: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Configure npm auth for GitHub Packages
        if: env.NPMRC_TOKEN != ''
        shell: bash
        run: |
          set -euo pipefail
          printf '%s\n' "//npm.pkg.github.com/:_authToken=${NPMRC_TOKEN}" >> ~/.npmrc

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Write tenant .env file
        shell: bash
        env:
          TENANT_ENV: ${{ secrets[matrix.secretName] }}
          SITE_DIR: ${{ matrix.workspaceDirectory }}
          SECRET_NAME: ${{ matrix.secretName }}
          DOMAIN: ${{ matrix.domain }}
        run: |
          set -euo pipefail
          if [[ -z "${TENANT_ENV}" ]]; then
            echo "Missing secret ${SECRET_NAME} for ${DOMAIN}" >&2
            exit 1
          fi
          printf '%s\n' "${TENANT_ENV}" > "${SITE_DIR}/.env"

      - name: Build tenant workspace
        shell: bash
        env:
          WORKSPACE_PACKAGE: ${{ matrix.workspacePackage }}
          BRANCH: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || (github.base_ref || github.ref_name) }}
        run: |
          set -euo pipefail
          if [[ "${BRANCH}" == 'prod' ]]; then
            pnpm --filter "${WORKSPACE_PACKAGE}" build:prod-bundle
          else
            pnpm --filter "${WORKSPACE_PACKAGE}" build:staging
          fi

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.domain }}-dist-${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_branch || (github.head_ref || github.ref_name) }}
          path: ${{ matrix.workspaceDirectory }}/dist
          if-no-files-found: error
          retention-days: 7

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
          role-session-name: github-actions-deploy

      - name: Create CloudFront Distribution Tenant invalidation
        shell: bash
        env:
          DISTRIBUTION_TENANT_ID: ${{ matrix.distributionId }}
        run: |
          set -euo pipefail
          JSON='{"Paths":{"Quantity":1,"Items":["/*"]},"CallerReference":"invalidation-test"}'
          echo "Creating CloudFront Distribution Tenant invalidation on tenant ${DISTRIBUTION_TENANT_ID}"
          aws cloudfront create-invalidation-for-distribution-tenant \
            --id "${DISTRIBUTION_TENANT_ID}" \
            --invalidation-batch "${JSON}"
