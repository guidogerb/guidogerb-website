name: Build and Test (CI)

on:
  push:
    branches: ['main', 'prod']
  workflow_dispatch:

permissions:
  contents: read

env:
  NODE_VERSION: '20.19.0'

jobs:
  resolve-metadata:
    name: Resolve tenant metadata
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.derive.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Discover tenants
        id: derive
        run: |
          node infra/scripts/resolve-tenants.mjs --format matrix --github-output matrix

  repository-checks:
    name: Monorepo checks
    needs: resolve-metadata
    runs-on: ubuntu-latest
    env:
      NPMRC_TOKEN: ${{ secrets.NPMRC_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure npm auth for GitHub Packages
        if: env.NPMRC_TOKEN != ''
        run: |
          printf '%s\n' "//npm.pkg.github.com/:_authToken=${NPMRC_TOKEN}" >> ~/.npmrc

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies
        run: pnpm install

      - name: Format check
        run: pnpm format:check

  build-site:
    name: Build ${{ matrix.domain }}
    needs: [resolve-metadata, repository-checks]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.resolve-metadata.outputs.matrix) }}
    env:
      NPMRC_TOKEN: ${{ secrets.NPMRC_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: pnpm

      - name: Configure npm auth for GitHub Packages
        if: env.NPMRC_TOKEN != ''
        run: |
          printf '%s\n' "//npm.pkg.github.com/:_authToken=${NPMRC_TOKEN}" >> ~/.npmrc

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          standalone: true

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Write tenant .env file
        shell: bash
        env:
          TENANT_ENV: ${{ secrets[matrix.secretName] }}
          SITE_DIR: ${{ matrix.workspaceDirectory }}
          SECRET_NAME: ${{ matrix.secretName }}
          DOMAIN: ${{ matrix.domain }}
        run: |
          set -euo pipefail
          if [[ -z "${TENANT_ENV}" ]]; then
            echo "Missing secret ${SECRET_NAME} for ${DOMAIN}" >&2
            exit 1
          fi
          printf '%s\n' "${TENANT_ENV}" > "${SITE_DIR}/.env"

      - name: Build tenant workspace
        shell: bash
        env:
          WORKSPACE_PACKAGE: ${{ matrix.workspacePackage }}
          BRANCH: ${{ github.base_ref || github.ref_name }}
        run: |
          set -euo pipefail
          if [[ "${BRANCH}" == 'prod' ]]; then
            pnpm --filter "${WORKSPACE_PACKAGE}" build:prod-bundle
          else
            pnpm --filter "${WORKSPACE_PACKAGE}" build:staging
          fi

      - name: Verify dist output exists
        run: |
          ls -l ${{ matrix.workspaceDirectory }}
          ls -l ${{ matrix.workspaceDirectory }}/dist

      - name: Upload tenant dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.domain }}-dist-${{ github.head_ref || github.ref_name }}
          path: ${{ matrix.workspaceDirectory }}/dist
          if-no-files-found: error
          retention-days: 7
